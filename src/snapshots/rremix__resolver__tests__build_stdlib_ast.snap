---
source: src/resolver.rs
assertion_line: 217
expression: "&resolutions.iter().map(|r|\n                format!(\"{r} -> {}\\n\",\n                    symbol_get(& inv_symbol_table,\n                    r.id.borrow().unwrap()).unwrap())).collect::<String>()"
---
if (expression) (expression)  -> if (condition) (consequence) 
if (expression) [statements]  -> if (condition) (consequence) 
convert (expression) to integer  -> convert (string-input) to integer 
show (expression)  -> show (output) 
based on (expression)  -> based on (original) 
if (expression) [statements]  -> if (condition) (consequence) 
if (expression) [statements]  -> if (condition) (consequence) 
for each (expression) in (expression) [statements]  -> for each #item in /the (list) (block) 
if (expression) [statements]  -> if (condition) (consequence) 
for each (expression) from (expression) to (expression) [statements]  -> for each #item from (start) to (finish) (block) 
if not (expression) [statements]  -> if not (condition) (block) 
if (expression) [statements]  -> if (condition) (consequence) 
if (expression) [statements]  -> if (condition) (consequence) 
if (expression) [statements]  -> if (condition) (consequence) 
for each (expression) in (expression) [statements]  -> for each #item in /the (list) (block) 
if (expression) [statements]  -> if (condition) (consequence) 
do (expression)  -> do (executable) 
showline (expression) as list  -> showline (list) as list 
append (expression) to (expression)  -> add/append /the (value) to /the (list) 
show (expression) as list  -> show (list) as list 
showline (expression)  -> showline (what) 
repeat (expression) times (expression)  -> repeat (count) times (block) 
with [statements] apply [statements] on each (expression) in (expression)  -> with (initial) apply (block) on each #item in (list) 
showline (expression)  -> showline (what) 
if (expression) [statements]  -> if (condition) (consequence) 
with [statements] apply [statements] on each (expression) in (expression)  -> with (initial) apply (block) on each #item in (list) 
for each (expression) in (expression) [statements]  -> for each #item in /the (list) (block) 
show (expression) as map  -> show (map) as map 
random (expression)  -> random (max-value) 
for each (expression) in (expression) [statements]  -> for each #item in /the (list) (block) 
if (expression) [statements]  -> if (condition) (consequence) 
if (expression) [statements]  -> if (condition) (consequence) 
if (expression) (expression)  -> if (condition) (consequence) 
show (expression)  -> show (output) 
show (expression)  -> show (output) 
for each (expression) from (expression) to (expression) [statements]  -> for each #item from (start) to (finish) (block) 
show (expression)  -> show (output) 
showline (expression) as map  -> showline (map) as map 
repeat (expression) times [statements]  -> repeat (count) times (block) 
random (expression)  -> random (max-value) 
showline (expression) as list  -> showline (list) as list 
showline (expression) as map  -> showline (map) as map 
for each (expression) in (expression) (expression)  -> for each #item in /the (list) (block) 
do (expression)  -> do (executable) 
length of (expression)  -> length of /the (list) 
do (expression)  -> do (executable) 
for each (expression) in (expression) [statements]  -> for each #item in /the (list) (block) 
with [statements] apply [statements] on each (expression) in (expression)  -> with (initial) apply (block) on each #item in (list) 
for each (expression) in (expression) [statements]  -> for each #item in /the (list) (block) 
if (expression) [statements]  -> if (condition) (consequence) 
not (expression)  -> not (value) 
apply (expression) (expression) times  -> apply/collect (block) (n) times 
for each (expression) in (expression) [statements]  -> for each #item in /the (list) (block) 
append (expression) to (expression)  -> add/append /the (value) to /the (list) 
for (expression) (expression) and (expression) (expression) on each row [statements] (expression)  -> for #across (num-cols) and #down (num-rows) on each row (row-block) (col-block) 
if (expression) [statements]  -> if (condition) (consequence) 
do (expression)  -> do (executable) 
show (expression)  -> show (output) 
with [statements] apply [statements] on each (expression) in (expression)  -> with (initial) apply (block) on each #item in (list) 
start (expression)  -> start (list) 
do [statements]  -> do (executable) 
if (expression) [statements] otherwise [statements]  -> if (condition) (consequence) otherwise (alternative) 
while (expression) repeat [statements]  -> while (condition) repeat (block) 
show (expression)  -> show (output) 

