// Magic rule (see pest docs)
WHITESPACE = _{ " " }

// Terminals
//----------------------------------
alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
// symbols allowed in variable names; todo: this should be expanded to almost every character
symbol = { "-" | lead_symbol }
// Symbols allowed to lead name parts; todo: this should be removed/expanded
lead_symbol = { "^" | "↲" | "!" | ("." ~ !NEWLINE) | "⇆" }
operator = {"+" | "-" | "×" | "÷" | "%" | "=" | "≠" | "<" | "≤" | ">" | "≥"}
hash = { "#" }
colon = { ":" }

// Literals
//----------------------------------
number = @{ ("-"{0,1}) ~ digit+ ~ ("." ~ digit+){0,1} }
boolean = { "true" | "false" }
char_double = {!"\"" ~ ANY }
char_single = {!"\'" ~ ANY }
string_double = { "\"" ~ char_double* ~ "\"" }
string_single = { "'" ~ char_single* ~ "'" }
string = @{ string_double | string_single }
literal = { number | boolean | list | string }

// Keywords
//----------------------------------
redo = { "redo" }

// Comments
//----------------------------------
// Comment indicated by a period at the *end* of the line
eol_comment = { (!(("." ~ NEWLINE) | NEWLINE) ~ ANY)* ~ "." ~ &NEWLINE }
// Comment indicated by sigil at the start of the line
sigiled_comment = { ( "=" | "- " | "." ) ~ (!NEWLINE ~ ANY)+ ~ &NEWLINE }
// Comment indicated by a semicolon; from there to end of line
teol_comment = { ";" ~ (!NEWLINE ~ ANY)+ ~ &NEWLINE }

// Lists
//----------------------------------
key_value = {
    variable ~ ":" ~ expression
}
list_item = !{
    block
    | key_value 
    | expression 
    // | "[" ~ teol_comment{0,1} ~ NEWLINE ~ continue_indent ~ inline_block ~ "]"
}
list = {
    "{" ~ "}"
    | "{" ~ (list_item ~ ",")* ~ list_item{0,1} ~ "}"
    | "{" ~ teol_comment{0,1} ~ NEWLINE ~ continue_indent ~ new_indent ~ (
        list_item ~ ","{0,1} ~ teol_comment{0,1} ~ NEWLINE ~ continue_indent
    )* ~ list_item{0,1} ~ ","{0,1}  ~ DROP ~ NEWLINE ~ continue_indent ~ "}" 
}
list_element_assignment = { single_name_part ~ "[" ~ expression ~ "]" ~ ":" ~ expression }

// Names
//----------------------------------

// Variable
variable = @{ "#"{0,1} ~ (alpha | lead_symbol ) ~ (alpha | digit | symbol )* }
// A single word
single_name_part = @{ (alpha | lead_symbol) ~ (alpha | digit | symbol )* }
// One or more words separated by '/', '/optional' is also allowed
name_list = ${ single_name_part ~ ("/" ~ single_name_part)* }
optional_name = { "/" ~ single_name_part }
name_part = { (optional_name | name_list)+ }
// A parethesised parameter
paren = { "(" ~ single_name_part ~ ")" }
// A parethesised reference parameter
ref_name = ${"#" ~ single_name_part}
ref_paren = { "(" ~ ref_name ~ ")" } // no whitespace between # and name_part
// A name, parameter, or reference parameter
name_paren = { name_part | paren | ref_paren }

// Statements
//----------------------------------

end_of_statement = _{ EOI | NEWLINE | "]" | ";" }
statement = {
    (
        assignment_statement 
        | return_statement
        | redo_statement
        | setter_call
        | list_element_assignment
        | expression
    ) ~ &end_of_statement
}

redo_statement = { redo }

return_statement = { "return" ~ expression* }

assignment_statement = { variable ~ colon ~ expression }

setter_call = { "fail" }

never_test = { "aweiuthsedrgkjhdnfxgkldsjf" }

newindent_block = { 
    continue_indent ~ new_indent ~ (
        statement ~ teol_comment{0,1}
        // Comments following the function signature *must* be indented so we
        // can detect the indent
        | eol_comment
        | sigiled_comment
        | never_test
        // Not sure if we can allow this without problems yet
        // | WHITESPACE* ~ NEWLINE
    )
    ~ (
        (NEWLINE ~ continue_indent) ~ (
            statement ~ teol_comment{0,1}
            | !WHITETAB ~ (eol_comment | sigiled_comment)
        ) ~ &NEWLINE
        // | WHITESPACE* ~ NEWLINE
    )* 
    ~ DROP 
}

// A block of statements denoted by an indent, unlike newindent_block
// does not require that it ends in a newline; allowing:
// function call [
//   statement
//   statement
// ] more names
inline_block = _{ 
    (new_indent ~ statement ~ teol_comment{0,1}) 
    ~ (
        (NEWLINE ~ continue_indent ~ statement ~ teol_comment{0,1})
        | NEWLINE ~ WHITESPACE*
    )*
    ~ DROP
}

// Blocks
//----------------------------------
block = {
    "[" ~ "]"
    | "[" ~ statement ~ "]"
    | "[" ~ teol_comment{0,1} ~ NEWLINE ~ continue_indent ~ inline_block ~ "]"
}

// Expressions
//----------------------------------

expression = { binary_expression | unary_expression }

binary_expression = { unary_expression ~ operator ~ expression }
unary_expression = { simple_expression | "(" ~ expression ~ ")" }
simple_expression = {
	list_element
	| create_call
	| function_call 
    | literal
    | variable
    | block
}
function_call_end = { NEWLINE | EOI | "}" | ")" | "]" | "," | operator }
function_call = {
    (
        single_name_part 
        // Inline literals are allowed without parentheses
        | literal 
        // Other expressions must be paranthesised
        | "(" ~ expression ~ ")"
        // Bracketed blocks
        | block
        // indented block folowed by continuation
        | NEWLINE ~ newindent_block ~ NEWLINE ~ continue_indent ~ "…"
        // indented block
        | NEWLINE ~ newindent_block
        // continuation
        // | NEWLINE ~ DROP ~ continue_indent ~ "…" 
        // ignore continuations at the end of the line
        | "…" ~ &NEWLINE
    ){2,}
    ~ &function_call_end
}

create_call = { "fail" }
list_element_end = _{ operator | NEWLINE ~ !(continue_indent ~ new_indent) | teol_comment | ")" | "]" | "}" }
list_element = { single_name_part ~ "[" ~ expression ~ "]" ~ &list_element_end }

// Functions
//----------------------------------

WHITETAB = _{ " " | "\t" }

// A function signature
function_signature = { name_paren+ }
// Indentation
// Put an indent on the stack, future indents must match this indent
new_indent = @{ PUSH(" "{2,} | "\t") }
continue_indent = @{ PEEK_ALL }
// A function definition
function_statements = { 
    continue_indent ~ new_indent ~ (
        statement
        // Comments following the function signature *must* be indented so we
        // can detect the indent
        | eol_comment
        | sigiled_comment
        // Not sure if we can allow this without problems yet
        // | WHITESPACE* ~ NEWLINE
    )
    ~ teol_comment{0,1} ~ NEWLINE
    ~ (
        continue_indent  ~ statement ~ teol_comment{0,1} ~ NEWLINE
        | continue_indent ~ !WHITETAB ~ eol_comment ~ NEWLINE
        | continue_indent ~ !WHITETAB ~ sigiled_comment ~ NEWLINE
        // | WHITESPACE* ~ NEWLINE
    )* 
    ~ !continue_indent ~ DROP 
}
function_definition = { function_signature ~ colon{1,2} ~ NEWLINE ~ function_statements }


// Top level
//----------------------------------
program = {
    (teol_comment{0,1} ~ NEWLINE | eol_comment | sigiled_comment | function_definition | statement)+ ~ EOI
}
