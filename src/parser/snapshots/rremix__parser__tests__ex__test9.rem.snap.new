---
source: src/parser/mod.rs
assertion_line: 75
expression: "format_pair(pair.unwrap(), 0, true)"
---
- program
  - eol_comment: ".Fizz-Bang.\r\n"
  - eol_comment: "===========\r\n\r\nfor each (n) from 1 to 100\r\n\tif ((n) is divisible by 35)\r\n\t\t\"fizz-bang\"^\r\n\t… otherwise …\r\n\t\tif ((n) is divisible by 5)\r\n\t\t\t\"fizz\"^ \r\n\t\t… otherwise …\r\n\t\t\tif ((n) is divisible by 7)\r\n\t\t\t\t\"bang\"^\r\n\t\t\t… otherwise …\r\n\t\t\t\t(n)^\r\n\t\" \"^\r\n↲\r\n\r\nTrying to do same thing with less indentation.\r\n"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "for"
    - single_name_part: "each"
    - expression > unary_expression > simple_expression > single_name_part: "n"
    - single_name_part: "from"
    - literal > number: "1"
    - single_name_part: "to"
    - literal > number: "100"
    - continue_indent: ""
    - newindent_block
      - new_indent: "\t"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "choose"
        - single_name_part: "from"
        - continue_indent: "\t"
        - newindent_block
          - new_indent: "\t"
          - statement > expression > unary_expression > simple_expression > function_call
            - expression > unary_expression > simple_expression > function_call
              - expression > unary_expression > simple_expression > single_name_part: "n"
              - single_name_part: "is"
              - single_name_part: "divisible"
              - single_name_part: "by"
              - literal > number: "35"
            - single_name_part: "do"
            - statement > expression > unary_expression > simple_expression > function_call
              - literal > string: "\"fizz-bang\""
              - single_name_part: "^"
          - continue_indent: "\t\t"
          - statement > expression > unary_expression > simple_expression > function_call
            - expression > unary_expression > simple_expression > function_call
              - expression > unary_expression > simple_expression > single_name_part: "n"
              - single_name_part: "is"
              - single_name_part: "divisible"
              - single_name_part: "by"
              - literal > number: "5"
            - single_name_part: "do"
            - statement > expression > unary_expression > simple_expression > function_call
              - literal > string: "\"fizz\""
              - single_name_part: "^"
          - continue_indent: "\t\t"
          - statement > expression > unary_expression > simple_expression > function_call
            - expression > unary_expression > simple_expression > function_call
              - expression > unary_expression > simple_expression > single_name_part: "n"
              - single_name_part: "is"
              - single_name_part: "divisible"
              - single_name_part: "by"
              - literal > number: "7"
            - single_name_part: "do"
            - statement > expression > unary_expression > simple_expression > function_call
              - literal > string: "\"bang\""
              - single_name_part: "^"
          - continue_indent: "\t\t"
          - statement > expression > unary_expression > simple_expression > function_call
            - expression > unary_expression > simple_expression > single_name_part: "n"
            - single_name_part: "^"
      - continue_indent: "\t"
      - statement > expression > unary_expression > simple_expression > function_call
        - literal > string: "\" \""
        - single_name_part: "^"
  - statement > expression > unary_expression > simple_expression > single_name_part: "↲"
  - EOI: ""
