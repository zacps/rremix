---
source: src/parser/mod.rs
assertion_line: 72
expression: "format_pair(&pair.unwrap(), 0, true)"
---
- program
  - eol_comment: "Testing the scope in blocks."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "one"
      - name_paren > ref_paren > ref_name > single_name_part: "a"
      - name_paren > paren > single_name_part: "block"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: ".these"
        - literal > string: "'a'"
        - single_name_part: "s"
        - single_name_part: "are"
        - single_name_part: "references"
        - single_name_part: "to"
        - single_name_part: "the"
        - single_name_part: "one"
        - single_name_part: "in"
        - single_name_part: "the"
        - single_name_part: "caller"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "showline"
        - literal > list
          - list_item > expression > unary_expression > simple_expression > literal > string: "\"before in one: \""
          - list_item > expression > unary_expression > simple_expression > variable: "#a"
      - statement > assignment_statement
        - variable: "#a"
        - colon: ":"
        - expression > binary_expression
          - unary_expression > simple_expression > variable: "#a"
          - operator: "+"
          - expression > unary_expression > simple_expression > literal > number: "1"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "do"
        - expression > unary_expression > simple_expression > variable: "block"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "showline"
        - literal > list
          - list_item > expression > unary_expression > simple_expression > literal > string: "\"after in one: \""
          - list_item > expression > unary_expression > simple_expression > variable: "#a"
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "two"
      - name_paren > paren > single_name_part: "a"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "showline"
        - literal > list
          - list_item > expression > unary_expression > simple_expression > literal > string: "\"before in two: \""
          - list_item > expression > unary_expression > simple_expression > variable: "a"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "one"
        - expression > unary_expression > simple_expression > variable: "a"
        - newindent_block
          - statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: ".these"
            - literal > string: "'a'"
            - single_name_part: "s"
            - single_name_part: "are"
            - single_name_part: "local"
            - single_name_part: "to"
            - single_name_part: "two"
          - statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: "showline"
            - literal > list
              - list_item > expression > unary_expression > simple_expression > literal > string: "\"before add: \""
              - list_item > expression > unary_expression > simple_expression > variable: "a"
          - statement > assignment_statement
            - variable: "a"
            - colon: ":"
            - expression > binary_expression
              - unary_expression > simple_expression > variable: "a"
              - operator: "+"
              - expression > unary_expression > simple_expression > literal > number: "1"
          - statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: "showline"
            - literal > list
              - list_item > expression > unary_expression > simple_expression > literal > string: "\"after add: \""
              - list_item > expression > unary_expression > simple_expression > variable: "a"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "showline"
        - literal > list
          - list_item > expression > unary_expression > simple_expression > literal > string: "\"after in two: \""
          - list_item > expression > unary_expression > simple_expression > variable: "a"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "showline"
    - literal > string: "\"Testing the scope of reference variables.\""
  - statement > assignment_statement
    - variable: "a"
    - colon: ":"
    - expression > unary_expression > simple_expression > literal > number: "1"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "showline"
    - literal > list
      - list_item > expression > unary_expression > simple_expression > literal > string: "\"a:\""
      - list_item > expression > unary_expression > simple_expression > variable: "a"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "one"
    - expression > unary_expression > simple_expression > variable: "a"
    - newindent_block
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: ".these"
        - literal > string: "'a'"
        - single_name_part: "s"
        - single_name_part: "are"
        - single_name_part: "the"
        - single_name_part: "global"
        - single_name_part: "one"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "showline"
        - literal > list
          - list_item > expression > unary_expression > simple_expression > literal > string: "\"before add: \""
          - list_item > expression > unary_expression > simple_expression > variable: "a"
      - statement > assignment_statement
        - variable: "a"
        - colon: ":"
        - expression > binary_expression
          - unary_expression > simple_expression > variable: "a"
          - operator: "+"
          - expression > unary_expression > simple_expression > literal > number: "1"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "showline"
        - literal > list
          - list_item > expression > unary_expression > simple_expression > literal > string: "\"after add: \""
          - list_item > expression > unary_expression > simple_expression > variable: "a"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "showline"
    - literal > list
      - list_item > expression > unary_expression > simple_expression > literal > string: "\"a:\""
      - list_item > expression > unary_expression > simple_expression > variable: "a"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "two"
    - expression > unary_expression > simple_expression > variable: "a"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "showline"
    - literal > list
      - list_item > expression > unary_expression > simple_expression > literal > string: "\"a:\""
      - list_item > expression > unary_expression > simple_expression > variable: "a"
  - EOI: ""
