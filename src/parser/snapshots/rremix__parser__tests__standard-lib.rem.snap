---
source: src/parser/mod.rs
assertion_line: 72
expression: "format_pair(&pair.unwrap(), 0, true)"
---
- program
  - eol_comment: "The Remix standard library."
  - sigiled_comment: "==========================="
  - eol_comment: "Output a newline character."
  - function_definition
    - function_signature > name_paren > name_part > name_list
      - single_name_part: "nl"
      - single_name_part: "↲"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "show"
      - literal > string: "\"\r\n\""
  - function_definition
    - function_signature > name_paren > name_part
      - name_list > single_name_part: "new"
      - name_list > single_name_part: "line"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > variable: "nl"
  - eol_comment: "Output the value of \"what\" followed by a newline."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "showline"
      - name_paren > paren > single_name_part: "what"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "show"
        - expression > unary_expression > simple_expression > variable: "what"
      - statement > expression > unary_expression > simple_expression > variable: "nl"
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "show"
        - name_list > single_name_part: "line"
      - name_paren > paren > single_name_part: "what"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "showline"
      - expression > unary_expression > simple_expression > variable: "what"
  - function_definition
    - function_signature
      - name_paren > name_part > optional_name > single_name_part: "show"
      - name_paren > paren > single_name_part: "what"
      - name_paren > name_part > name_list > single_name_part: "↲"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "showline"
      - expression > unary_expression > simple_expression > variable: "what"
  - eol_comment: "A simplified show function."
  - function_definition
    - function_signature
      - name_paren > paren > single_name_part: "what"
      - name_paren > name_part > name_list > single_name_part: "^"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "show"
      - expression > unary_expression > simple_expression > variable: "what"
  - sigiled_comment: "========================================"
  - eol_comment: "Just trying out a more verbal version."
  - function_definition
    - function_signature > name_paren > name_part
      - optional_name > single_name_part: "an"
      - name_list > single_name_part: "empty"
      - name_list > single_name_part: "list"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > literal > list: "{}"
  - sigiled_comment: "========================================"
  - eol_comment: "Negate the \"value\"."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "not"
      - name_paren > paren > single_name_part: "value"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "if"
        - expression > unary_expression > simple_expression > variable: "value"
        - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > literal > boolean: "false"
      - statement > expression > unary_expression > simple_expression > literal > boolean: "true"
  - eol_comment: "The boolean \"and\" operation."
  - eol_comment: "The \"if\" in the \"not\" function causes blocks to be evaluated."
  - function_definition
    - function_signature
      - name_paren > paren > single_name_part: "value1"
      - name_paren > name_part > name_list > single_name_part: "and"
      - name_paren > paren > single_name_part: "value2"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "if"
        - expression > unary_expression > simple_expression > function_call
          - single_name_part: "not"
          - expression > unary_expression > simple_expression > variable: "value1"
        - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > literal > boolean: "false"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "if"
        - expression > unary_expression > simple_expression > function_call
          - single_name_part: "not"
          - expression > unary_expression > simple_expression > variable: "value2"
        - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > literal > boolean: "false"
      - statement > expression > unary_expression > simple_expression > literal > boolean: "true"
  - eol_comment: "The boolean \"or\" operation."
  - function_definition
    - function_signature
      - name_paren > paren > single_name_part: "value1"
      - name_paren > name_part > name_list > single_name_part: "or"
      - name_paren > paren > single_name_part: "value2"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "if"
        - expression > unary_expression > simple_expression > variable: "value1"
        - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > literal > boolean: "true"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "if"
        - expression > unary_expression > simple_expression > variable: "value2"
        - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > literal > boolean: "true"
      - statement > expression > unary_expression > simple_expression > literal > boolean: "false"
  - eol_comment: "Report if not at the end of the \"list\"."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "not"
        - name_list > single_name_part: "at"
        - optional_name > single_name_part: "the"
        - name_list > single_name_part: "end"
        - name_list > single_name_part: "of"
        - optional_name > single_name_part: "the"
      - name_paren > paren > single_name_part: "list"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "not"
      - expression > unary_expression > simple_expression > function_call
        - single_name_part: "end"
        - single_name_part: "of"
        - expression > unary_expression > simple_expression > variable: "list"
  - sigiled_comment: "========================================"
  - eol_comment: "Alternative append function."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "to"
      - name_paren > paren > single_name_part: "so-far"
      - name_paren > name_part
        - name_list
          - single_name_part: "add"
          - single_name_part: "append"
        - optional_name > single_name_part: "on"
      - name_paren > paren > single_name_part: "more"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "append"
      - expression > unary_expression > simple_expression > variable: "more"
      - single_name_part: "to"
      - expression > unary_expression > simple_expression > variable: "so-far"
  - sigiled_comment: "=== Input operations ==="
  - eol_comment: "Ask for an integer value."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "ask"
        - name_list > single_name_part: "for"
        - optional_name > single_name_part: "an"
        - name_list > single_name_part: "integer"
      - name_paren > paren > single_name_part: "prompt"
    - colon: ":"
    - function_statements
      - statement > assignment_statement
        - variable: "input"
        - colon: ":"
        - expression > unary_expression > simple_expression > function_call
          - single_name_part: "ask"
          - expression > unary_expression > simple_expression > variable: "prompt"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "convert"
        - expression > unary_expression > simple_expression > variable: "input"
        - single_name_part: "to"
        - single_name_part: "integer"
  - sigiled_comment: "========================================"
  - eol_comment: "Shorthand for \"if (not ()) []\"."
  - eol_comment: "Transparent like \"if\"."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "if"
        - name_list > single_name_part: "not"
      - name_paren > paren > single_name_part: "condition"
      - name_paren > paren > single_name_part: "block"
    - colon: ":"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "if"
      - expression > unary_expression > simple_expression > function_call
        - single_name_part: "not"
        - expression > unary_expression > simple_expression > variable: "condition"
      - newindent_block > statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "do"
        - expression > unary_expression > simple_expression > variable: "block"
  - eol_comment: "Repeat the \"block\" for ever."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "repeat"
      - name_paren > paren > single_name_part: "block"
      - name_paren > name_part > name_list > single_name_part: "forever"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "do"
        - expression > unary_expression > simple_expression > variable: "block"
      - statement > redo_statement > redo: "redo"
  - eol_comment: "Repeat the \"block\" a definite number of times."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "repeat"
      - name_paren > paren > single_name_part: "count"
      - name_paren > name_part > name_list > single_name_part: "times"
      - name_paren > paren > single_name_part: "block"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "if"
        - expression > binary_expression
          - unary_expression > simple_expression > variable: "count"
          - operator: "≤"
          - expression > unary_expression > simple_expression > literal > number: "0"
        - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > variable: "last"
      - statement > assignment_statement
        - variable: "last"
        - colon: ":"
        - expression > unary_expression > simple_expression > function_call
          - single_name_part: "do"
          - expression > unary_expression > simple_expression > variable: "block"
      - statement > assignment_statement
        - variable: "count"
        - colon: ":"
        - expression > binary_expression
          - unary_expression > simple_expression > variable: "count"
          - operator: "-"
          - expression > unary_expression > simple_expression > literal > number: "1"
      - statement > redo_statement > redo: "redo"
  - eol_comment: "Alternative definite repeat."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "repeat"
      - name_paren > paren > single_name_part: "block"
      - name_paren > paren > single_name_part: "count"
      - name_paren > name_part > name_list > single_name_part: "times"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "repeat"
      - expression > unary_expression > simple_expression > variable: "count"
      - single_name_part: "times"
      - expression > unary_expression > simple_expression > variable: "block"
  - eol_comment: "While a \"condition\" is true keep doing \"block\"."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "while"
      - name_paren > paren > single_name_part: "condition"
      - name_paren > name_part > name_list > single_name_part: "repeat"
      - name_paren > paren > single_name_part: "block"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "if"
        - single_name_part: "not"
        - expression > unary_expression > simple_expression > variable: "condition"
        - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > variable: "last"
      - statement > assignment_statement
        - variable: "last"
        - colon: ":"
        - expression > unary_expression > simple_expression > function_call
          - single_name_part: "do"
          - expression > unary_expression > simple_expression > variable: "block"
      - statement > redo_statement > redo: "redo"
  - eol_comment: "Catch the result of \"block\" even if a \"return\" is used."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "catch"
        - name_list > single_name_part: "do"
      - name_paren > paren > single_name_part: "block"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "do"
      - expression > unary_expression > simple_expression > variable: "block"
  - eol_comment: "An alternative name for return without a value, i.e. none."
  - eol_comment: "This is more applicable when breaking out from within a loop or a sequence statement."
  - function_definition
    - function_signature > name_paren > name_part
      - name_list > single_name_part: "break"
      - name_list > single_name_part: "out"
    - colon: ":"
    - colon: ":"
    - function_statements > statement > return_statement: "return"
  - eol_comment: "Repeat a \"block\" until some \"condition\" is true."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "repeat"
      - name_paren > paren > single_name_part: "block"
      - name_paren > name_part > name_list > single_name_part: "until"
      - name_paren > paren > single_name_part: "condition"
    - colon: ":"
    - function_statements
      - statement > assignment_statement
        - variable: "last"
        - colon: ":"
        - expression > unary_expression > simple_expression > function_call
          - single_name_part: "do"
          - expression > unary_expression > simple_expression > variable: "block"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "if"
        - expression > unary_expression > simple_expression > variable: "condition"
        - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > variable: "last"
      - statement > redo_statement > redo: "redo"
  - sigiled_comment: "========================================"
  - eol_comment: "Run \"block\" for each item in \"list\"."
  - eol_comment: "\"block\" will refer to \"item\"."
  - eol_comment: "Returns either the last statement result or whatever is returned from \"block\"."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "for"
        - name_list > single_name_part: "each"
      - name_paren > ref_paren > ref_name > single_name_part: "item"
      - name_paren > name_part
        - name_list > single_name_part: "in"
        - optional_name > single_name_part: "the"
      - name_paren > paren > single_name_part: "list"
      - name_paren > paren > single_name_part: "block"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "start"
        - expression > unary_expression > simple_expression > variable: "list"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "do"
        - newindent_block
          - statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: "if"
            - expression > unary_expression > simple_expression > function_call
              - single_name_part: "end"
              - single_name_part: "of"
              - expression > unary_expression > simple_expression > variable: "list"
            - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > variable: "last"
          - statement > assignment_statement
            - variable: "#item"
            - colon: ":"
            - expression > unary_expression > simple_expression > function_call
              - single_name_part: "next"
              - expression > unary_expression > simple_expression > variable: "list"
          - eol_comment: "A return in the (block) following breaks out of the loop, with its result."
          - statement > assignment_statement
            - variable: "last"
            - colon: ":"
            - expression > unary_expression > simple_expression > function_call
              - single_name_part: "do"
              - expression > unary_expression > simple_expression > variable: "block"
          - statement > redo_statement > redo: "redo"
  - eol_comment: "A for each with a definite \"start\" and \"finish\" value."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "for"
        - name_list > single_name_part: "each"
      - name_paren > ref_paren > ref_name > single_name_part: "item"
      - name_paren > name_part > name_list > single_name_part: "from"
      - name_paren > paren > single_name_part: "start"
      - name_paren > name_part > name_list > single_name_part: "to"
      - name_paren > paren > single_name_part: "finish"
      - name_paren > paren > single_name_part: "block"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "for"
      - single_name_part: "each"
      - expression > unary_expression > simple_expression > variable: "#item"
      - single_name_part: "in"
      - expression > unary_expression > simple_expression > function_call
        - expression > unary_expression > simple_expression > variable: "start"
        - single_name_part: "to"
        - expression > unary_expression > simple_expression > variable: "finish"
      - expression > unary_expression > simple_expression > variable: "block"
  - eol_comment: "For each with \"start\", \"finish\" and \"step\"."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "for"
        - name_list > single_name_part: "each"
      - name_paren > ref_paren > ref_name > single_name_part: "item"
      - name_paren > name_part > name_list > single_name_part: "from"
      - name_paren > paren > single_name_part: "start"
      - name_paren > name_part > name_list > single_name_part: "to"
      - name_paren > paren > single_name_part: "finish"
      - name_paren > name_part
        - name_list > single_name_part: "in"
        - name_list > single_name_part: "steps"
        - name_list > single_name_part: "of"
      - name_paren > paren > single_name_part: "step"
      - name_paren > paren > single_name_part: "block"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "if"
        - expression > binary_expression
          - unary_expression > simple_expression > variable: "start"
          - operator: "<"
          - expression > unary_expression > simple_expression > variable: "finish"
        - newindent_block > statement > assignment_statement
          - variable: "test"
          - colon: ":"
          - expression > unary_expression > simple_expression > block > statement > expression > binary_expression
            - unary_expression > simple_expression > variable: "#item"
            - operator: "≤"
            - expression > unary_expression > simple_expression > variable: "finish"
        - single_name_part: "otherwise"
        - newindent_block > statement > assignment_statement
          - variable: "test"
          - colon: ":"
          - expression > unary_expression > simple_expression > block > statement > expression > binary_expression
            - unary_expression > simple_expression > variable: "#item"
            - operator: "≥"
            - expression > unary_expression > simple_expression > variable: "finish"
      - statement > assignment_statement
        - variable: "#item"
        - colon: ":"
        - expression > unary_expression > simple_expression > variable: "start"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "while"
        - expression > unary_expression > simple_expression > variable: "test"
        - single_name_part: "repeat"
        - newindent_block
          - statement > assignment_statement
            - variable: "last"
            - colon: ":"
            - expression > unary_expression > simple_expression > function_call
              - single_name_part: "do"
              - expression > unary_expression > simple_expression > variable: "block"
          - statement > assignment_statement
            - variable: "#item"
            - colon: ":"
            - expression > binary_expression
              - unary_expression > simple_expression > variable: "#item"
              - operator: "+"
              - expression > unary_expression > simple_expression > variable: "step"
      - statement > expression > unary_expression > simple_expression > variable: "last"
  - eol_comment: "A 2 dimensional for loop over \"num-rows\" and \"num-cols\"."
  - eol_comment: "\"row-block\" can refer to \"#down\"."
  - eol_comment: "\"col-block\" can refer to \"#down\" and \"#across\"."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "for"
      - name_paren > ref_paren > ref_name > single_name_part: "across"
      - name_paren > paren > single_name_part: "num-cols"
      - name_paren > name_part > name_list > single_name_part: "and"
      - name_paren > ref_paren > ref_name > single_name_part: "down"
      - name_paren > paren > single_name_part: "num-rows"
      - name_paren > name_part
        - name_list > single_name_part: "on"
        - name_list > single_name_part: "each"
        - name_list > single_name_part: "row"
      - name_paren > paren > single_name_part: "row-block"
      - name_paren > paren > single_name_part: "col-block"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "for"
      - single_name_part: "each"
      - expression > unary_expression > simple_expression > variable: "#down"
      - single_name_part: "from"
      - literal > number: "1"
      - single_name_part: "to"
      - expression > unary_expression > simple_expression > variable: "num-rows"
      - newindent_block
        - statement > expression > unary_expression > simple_expression > function_call
          - single_name_part: "do"
          - expression > unary_expression > simple_expression > variable: "row-block"
        - statement > expression > unary_expression > simple_expression > function_call
          - single_name_part: "for"
          - single_name_part: "each"
          - expression > unary_expression > simple_expression > variable: "#across"
          - single_name_part: "from"
          - literal > number: "1"
          - single_name_part: "to"
          - expression > unary_expression > simple_expression > variable: "num-cols"
          - newindent_block > statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: "do"
            - expression > unary_expression > simple_expression > variable: "col-block"
  - eol_comment: "A 2 dimensional for loop with no \"row-block\"."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "for"
      - name_paren > ref_paren > ref_name > single_name_part: "across"
      - name_paren > paren > single_name_part: "num-cols"
      - name_paren > name_part > name_list > single_name_part: "and"
      - name_paren > ref_paren > ref_name > single_name_part: "down"
      - name_paren > paren > single_name_part: "num-rows"
      - name_paren > paren > single_name_part: "col-block"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "for"
      - expression > unary_expression > simple_expression > variable: "#across"
      - expression > unary_expression > simple_expression > variable: "num-cols"
      - single_name_part: "and"
      - expression > unary_expression > simple_expression > variable: "#down"
      - expression > unary_expression > simple_expression > variable: "num-rows"
      - single_name_part: "on"
      - single_name_part: "each"
      - single_name_part: "row"
      - block: "[]"
      - expression > unary_expression > simple_expression > variable: "col-block"
  - sigiled_comment: "========================================"
  - eol_comment: "Filter \"list\" using \"condition-block\" on each \"#item\"."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "filter"
      - name_paren > paren > single_name_part: "list"
      - name_paren > name_part > name_list > single_name_part: "by"
      - name_paren > ref_paren > ref_name > single_name_part: "item"
      - name_paren > name_part > name_list > single_name_part: "where"
      - name_paren > paren > single_name_part: "condition-block"
    - colon: ":"
    - function_statements
      - statement > assignment_statement
        - variable: "new-list"
        - colon: ":"
        - expression > unary_expression > simple_expression > literal > list: "{}"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "for"
        - single_name_part: "each"
        - expression > unary_expression > simple_expression > variable: "#item"
        - single_name_part: "in"
        - expression > unary_expression > simple_expression > variable: "list"
        - newindent_block > statement > expression > unary_expression > simple_expression > function_call
          - single_name_part: "if"
          - expression > unary_expression > simple_expression > variable: "condition-block"
          - newindent_block > statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: "append"
            - expression > unary_expression > simple_expression > variable: "item"
            - single_name_part: "to"
            - expression > unary_expression > simple_expression > variable: "new-list"
      - statement > expression > unary_expression > simple_expression > variable: "new-list"
  - eol_comment: "Collect items from \"list\" until \"condition\" is true."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "keep"
      - name_paren > ref_paren > ref_name > single_name_part: "item"
      - name_paren > name_part > name_list > single_name_part: "from"
      - name_paren > paren > single_name_part: "list"
      - name_paren > name_part > name_list > single_name_part: "until"
      - name_paren > paren > single_name_part: "condition"
    - colon: ":"
    - function_statements
      - statement > assignment_statement
        - variable: "new-list"
        - colon: ":"
        - expression > unary_expression > simple_expression > literal > list: "{}"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "for"
        - single_name_part: "each"
        - expression > unary_expression > simple_expression > variable: "#item"
        - single_name_part: "in"
        - expression > unary_expression > simple_expression > variable: "list"
        - newindent_block
          - statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: "if"
            - expression > unary_expression > simple_expression > variable: "condition"
            - newindent_block > statement > expression > unary_expression > simple_expression > function_call
              - single_name_part: "break"
              - single_name_part: "out"
          - statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: "append"
            - expression > unary_expression > simple_expression > variable: "#item"
            - single_name_part: "to"
            - expression > unary_expression > simple_expression > variable: "new-list"
      - statement > expression > unary_expression > simple_expression > variable: "new-list"
  - eol_comment: "Create a new list by applying \"block\" to each element of \"list\"."
  - eol_comment: "Uses the variable name passed as #item."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "apply"
      - name_paren > paren > single_name_part: "block"
      - name_paren > name_part
        - name_list > single_name_part: "to"
        - name_list > single_name_part: "each"
      - name_paren > ref_paren > ref_name > single_name_part: "item"
      - name_paren > name_part
        - name_list > single_name_part: "from"
        - optional_name > single_name_part: "the"
      - name_paren > paren > single_name_part: "list"
    - colon: ":"
    - function_statements
      - statement > assignment_statement
        - variable: "result"
        - colon: ":"
        - expression > unary_expression > simple_expression > literal > list: "{}"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "for"
        - single_name_part: "each"
        - expression > unary_expression > simple_expression > variable: "#item"
        - single_name_part: "in"
        - expression > unary_expression > simple_expression > variable: "list"
        - newindent_block > statement > expression > unary_expression > simple_expression > function_call
          - single_name_part: "append"
          - expression > unary_expression > simple_expression > function_call
            - single_name_part: "do"
            - expression > unary_expression > simple_expression > variable: "block"
          - single_name_part: "to"
          - expression > unary_expression > simple_expression > variable: "result"
  - eol_comment: "Create a new list by applying \"block\" \"n\" times."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list
        - single_name_part: "apply"
        - single_name_part: "collect"
      - name_paren > paren > single_name_part: "block"
      - name_paren > paren > single_name_part: "n"
      - name_paren > name_part > name_list > single_name_part: "times"
    - colon: ":"
    - function_statements
      - statement > assignment_statement
        - variable: "result"
        - colon: ":"
        - expression > unary_expression > simple_expression > literal > list: "{}"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "repeat"
        - expression > unary_expression > simple_expression > variable: "n"
        - single_name_part: "times"
        - newindent_block > statement > expression > unary_expression > simple_expression > function_call
          - single_name_part: "append"
          - expression > unary_expression > simple_expression > function_call
            - single_name_part: "do"
            - expression > unary_expression > simple_expression > variable: "block"
          - single_name_part: "to"
          - expression > unary_expression > simple_expression > variable: "result"
  - function_definition
    - function_signature
      - name_paren > name_part > name_list
        - single_name_part: "apply"
        - single_name_part: "collect"
      - name_paren > paren > single_name_part: "n"
      - name_paren > name_part > name_list > single_name_part: "times"
      - name_paren > paren > single_name_part: "block"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "apply"
      - expression > unary_expression > simple_expression > variable: "block"
      - expression > unary_expression > simple_expression > variable: "n"
      - single_name_part: "times"
  - eol_comment: "Choose a random item from a list."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "pick"
        - optional_name > single_name_part: "item"
        - name_list > single_name_part: "from"
        - optional_name > single_name_part: "the"
      - name_paren > paren > single_name_part: "list"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > list_element
      - single_name_part: "list"
      - expression > unary_expression > simple_expression > function_call
        - single_name_part: "random"
        - expression > unary_expression > simple_expression > function_call
          - single_name_part: "length"
          - single_name_part: "of"
          - expression > unary_expression > simple_expression > variable: "list"
  - sigiled_comment: "========================================"
  - eol_comment: "Return true if all blocks in the {list-of-blocks} are true."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "all"
        - name_list > single_name_part: "of"
      - name_paren > paren > single_name_part: "list-of-blocks"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "for"
      - single_name_part: "each"
      - expression > unary_expression > simple_expression > variable: "item-block"
      - single_name_part: "in"
      - expression > unary_expression > simple_expression > variable: "list-of-blocks"
      - newindent_block
        - statement > expression > unary_expression > simple_expression > function_call
          - single_name_part: "if"
          - single_name_part: "not"
          - expression > unary_expression > simple_expression > variable: "item-block"
          - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > literal > boolean: "false"
        - statement > expression > unary_expression > simple_expression > literal > boolean: "true"
  - eol_comment: "Return true if any block in the {list-of-blocks} are true."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "any"
        - name_list > single_name_part: "of"
      - name_paren > paren > single_name_part: "list-of-blocks"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "for"
      - single_name_part: "each"
      - expression > unary_expression > simple_expression > variable: "item-block"
      - single_name_part: "in"
      - expression > unary_expression > simple_expression > variable: "list-of-blocks"
      - newindent_block
        - statement > expression > unary_expression > simple_expression > function_call
          - single_name_part: "if"
          - expression > unary_expression > simple_expression > variable: "item-block"
          - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > literal > boolean: "true"
        - statement > expression > unary_expression > simple_expression > literal > boolean: "false"
  - eol_comment: "If any. Transparent like \"if\"."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "if"
        - name_list > single_name_part: "any"
        - name_list > single_name_part: "of"
      - name_paren > paren > single_name_part: "list-of-blocks"
      - name_paren > name_part > optional_name > single_name_part: "do"
      - name_paren > paren > single_name_part: "consequence"
    - colon: ":"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "if"
      - expression > unary_expression > simple_expression > function_call
        - single_name_part: "any"
        - single_name_part: "of"
        - expression > unary_expression > simple_expression > variable: "list-of-blocks"
      - expression > unary_expression > simple_expression > variable: "consequence"
  - eol_comment: "If all. Transparent like \"if\"."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "if"
        - name_list > single_name_part: "all"
        - name_list > single_name_part: "of"
      - name_paren > paren > single_name_part: "list-of-blocks"
      - name_paren > name_part > optional_name > single_name_part: "do"
      - name_paren > paren > single_name_part: "consequence"
    - colon: ":"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "if"
      - expression > unary_expression > simple_expression > function_call
        - single_name_part: "all"
        - single_name_part: "of"
        - expression > unary_expression > simple_expression > variable: "list-of-blocks"
      - expression > unary_expression > simple_expression > variable: "consequence"
  - sigiled_comment: "========================================"
  - eol_comment: "The \"options-block\" is a sequence of \"[condition] do [block]\" statements."
  - eol_comment: "Optionally followed by a default statement."
  - eol_comment: "Unlike a simple \"do\" this function catches any \"break out\" calls."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "choose"
        - name_list > single_name_part: "from"
      - name_paren > paren > single_name_part: "options-block"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "do"
      - expression > unary_expression > simple_expression > variable: "options-block"
  - eol_comment: "Note the :: in the following function definition."
  - function_definition
    - function_signature
      - name_paren > paren > single_name_part: "condition"
      - name_paren > name_part > name_list > single_name_part: "do"
      - name_paren > paren > single_name_part: "block"
    - colon: ":"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "if"
      - expression > unary_expression > simple_expression > variable: "condition"
      - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "do"
        - expression > unary_expression > simple_expression > variable: "block"
  - eol_comment: "This is to be used by \"choose from\"."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "all"
        - name_list > single_name_part: "of"
      - name_paren > paren > single_name_part: "conditions"
      - name_paren > name_part > name_list > single_name_part: "do"
      - name_paren > paren > single_name_part: "consequence"
    - colon: ":"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "if"
      - expression > unary_expression > simple_expression > function_call
        - single_name_part: "all"
        - single_name_part: "of"
        - expression > unary_expression > simple_expression > variable: "conditions"
      - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "do"
        - expression > unary_expression > simple_expression > variable: "consequence"
  - eol_comment: "This is to be used by \"choose from\"."
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "any"
        - name_list > single_name_part: "of"
      - name_paren > paren > single_name_part: "conditions"
      - name_paren > name_part > name_list > single_name_part: "do"
      - name_paren > paren > single_name_part: "consequence"
    - colon: ":"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "if"
      - expression > unary_expression > simple_expression > function_call
        - single_name_part: "any"
        - single_name_part: "of"
        - expression > unary_expression > simple_expression > variable: "conditions"
      - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "do"
        - expression > unary_expression > simple_expression > variable: "consequence"
  - eol_comment: "See ex/middle."
  - function_definition
    - function_signature
      - name_paren > paren > single_name_part: "condition"
      - name_paren > name_part > name_list > single_name_part: "produces"
      - name_paren > paren > single_name_part: "result"
    - colon: ":"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "if"
      - expression > unary_expression > simple_expression > variable: "condition"
      - newindent_block > statement > return_statement > expression > unary_expression > simple_expression > variable: "result"
  - sigiled_comment: "========================================"
  - eol_comment: "Create a pretty string of \"list\"."
  - function_definition
    - function_signature
      - name_paren > paren > single_name_part: "list"
      - name_paren > name_part
        - name_list > single_name_part: "as"
        - name_list > single_name_part: "list"
    - colon: ":"
    - function_statements
      - statement > assignment_statement
        - variable: "result"
        - colon: ":"
        - expression > unary_expression > simple_expression > literal > string: "\"{\""
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "for"
        - single_name_part: "each"
        - expression > unary_expression > simple_expression > variable: "item"
        - single_name_part: "in"
        - expression > unary_expression > simple_expression > variable: "list"
        - newindent_block
          - statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: "if"
            - expression > unary_expression > simple_expression > function_call
              - expression > binary_expression
                - unary_expression > simple_expression > function_call
                  - single_name_part: "type"
                  - single_name_part: "of"
                  - expression > unary_expression > simple_expression > variable: "item"
                - operator: "="
                - expression > unary_expression > simple_expression > literal > string: "\"list\""
              - single_name_part: "or"
              - expression > binary_expression
                - unary_expression > simple_expression > function_call
                  - single_name_part: "type"
                  - single_name_part: "of"
                  - expression > unary_expression > simple_expression > variable: "item"
                - operator: "="
                - expression > unary_expression > simple_expression > literal > string: "\"map\""
            - newindent_block > statement > expression > unary_expression > simple_expression > function_call
              - single_name_part: "append"
              - expression > unary_expression > simple_expression > function_call
                - expression > unary_expression > simple_expression > variable: "item"
                - single_name_part: "as"
                - single_name_part: "list"
              - single_name_part: "to"
              - expression > unary_expression > simple_expression > variable: "result"
            - single_name_part: "otherwise"
            - newindent_block
              - statement > expression > unary_expression > simple_expression > function_call
                - single_name_part: "if"
                - expression > unary_expression > simple_expression > variable: "item"
                - single_name_part: "is"
                - single_name_part: "string"
                - single_name_part: "append"
                - single_name_part: "quote"
                - single_name_part: "to"
                - expression > unary_expression > simple_expression > variable: "result"
              - statement > expression > unary_expression > simple_expression > function_call
                - single_name_part: "append"
                - expression > unary_expression > simple_expression > function_call
                  - single_name_part: "convert"
                  - expression > unary_expression > simple_expression > variable: "item"
                  - single_name_part: "to"
                  - single_name_part: "string"
                - single_name_part: "to"
                - expression > unary_expression > simple_expression > variable: "result"
              - statement > expression > unary_expression > simple_expression > function_call
                - single_name_part: "if"
                - expression > unary_expression > simple_expression > variable: "item"
                - single_name_part: "is"
                - single_name_part: "string"
                - single_name_part: "append"
                - single_name_part: "quote"
                - single_name_part: "to"
                - expression > unary_expression > simple_expression > variable: "result"
          - statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: "if"
            - expression > unary_expression > simple_expression > function_call
              - single_name_part: "not"
              - single_name_part: "at"
              - single_name_part: "end"
              - single_name_part: "of"
              - expression > unary_expression > simple_expression > variable: "list"
            - newindent_block > statement > expression > unary_expression > simple_expression > function_call
              - single_name_part: "append"
              - literal > string: "\", \""
              - single_name_part: "to"
              - expression > unary_expression > simple_expression > variable: "result"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "append"
        - literal > string: "\"}\""
        - single_name_part: "to"
        - expression > unary_expression > simple_expression > variable: "result"
  - eol_comment: "Only used in (list) as list."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "if"
      - name_paren > paren > single_name_part: "value"
      - name_paren > name_part
        - name_list > single_name_part: "is"
        - name_list > single_name_part: "string"
        - name_list > single_name_part: "append"
        - name_list > single_name_part: "quote"
        - name_list > single_name_part: "to"
      - name_paren > paren > single_name_part: "str"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "if"
      - expression > binary_expression
        - unary_expression > simple_expression > function_call
          - single_name_part: "type"
          - single_name_part: "of"
          - expression > unary_expression > simple_expression > variable: "value"
        - operator: "="
        - expression > unary_expression > simple_expression > literal > string: "\"string\""
      - block > statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "append"
        - literal > string: "\"'\""
        - single_name_part: "to"
        - expression > unary_expression > simple_expression > variable: "str"
  - eol_comment: "Output a pretty printed \"list\"."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "show"
      - name_paren > paren > single_name_part: "list"
      - name_paren > name_part
        - name_list > single_name_part: "as"
        - name_list > single_name_part: "list"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "show"
      - expression > unary_expression > simple_expression > function_call
        - expression > unary_expression > simple_expression > variable: "list"
        - single_name_part: "as"
        - single_name_part: "list"
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "showline"
      - name_paren > paren > single_name_part: "list"
      - name_paren > name_part
        - name_list > single_name_part: "as"
        - name_list > single_name_part: "list"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "show"
        - expression > unary_expression > simple_expression > variable: "list"
        - single_name_part: "as"
        - single_name_part: "list"
      - statement > expression > unary_expression > simple_expression > variable: "nl"
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "show"
        - name_list > single_name_part: "line"
      - name_paren > paren > single_name_part: "list"
      - name_paren > name_part
        - name_list > single_name_part: "as"
        - name_list > single_name_part: "list"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "showline"
      - expression > unary_expression > simple_expression > variable: "list"
      - single_name_part: "as"
      - single_name_part: "list"
  - function_definition
    - function_signature
      - name_paren > paren > single_name_part: "list"
      - name_paren > name_part
        - name_list > single_name_part: "as"
        - name_list > single_name_part: "list"
        - name_list > single_name_part: "↲"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "showline"
      - expression > unary_expression > simple_expression > variable: "list"
      - single_name_part: "as"
      - single_name_part: "list"
  - eol_comment: "Output a pretty printed \"map\"."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "show"
      - name_paren > paren > single_name_part: "map"
      - name_paren > name_part
        - name_list > single_name_part: "as"
        - name_list > single_name_part: "map"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "show"
        - literal > string: "\"{\""
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "for"
        - single_name_part: "each"
        - expression > unary_expression > simple_expression > variable: "n"
        - single_name_part: "from"
        - literal > number: "1"
        - single_name_part: "to"
        - expression > unary_expression > simple_expression > function_call
          - single_name_part: "length"
          - single_name_part: "of"
          - expression > unary_expression > simple_expression > variable: "map"
        - newindent_block
          - statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: "show"
            - expression > unary_expression > simple_expression > list_element
              - single_name_part: "map"
              - expression > unary_expression > simple_expression > variable: "n"
          - statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: "if"
            - expression > binary_expression
              - unary_expression > simple_expression > variable: "n"
              - operator: "≠"
              - expression > unary_expression > simple_expression > function_call
                - single_name_part: "length"
                - single_name_part: "of"
                - expression > unary_expression > simple_expression > variable: "map"
            - newindent_block > statement > expression > unary_expression > simple_expression > function_call
              - single_name_part: "show"
              - literal > string: "\", \""
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "show"
        - literal > string: "\"}\""
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "showline"
      - name_paren > paren > single_name_part: "map"
      - name_paren > name_part
        - name_list > single_name_part: "as"
        - name_list > single_name_part: "map"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "show"
        - expression > unary_expression > simple_expression > variable: "map"
        - single_name_part: "as"
        - single_name_part: "map"
      - statement > expression > unary_expression > simple_expression > variable: "nl"
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "show"
        - name_list > single_name_part: "line"
      - name_paren > paren > single_name_part: "map"
      - name_paren > name_part
        - name_list > single_name_part: "as"
        - name_list > single_name_part: "map"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "showline"
      - expression > unary_expression > simple_expression > variable: "map"
      - single_name_part: "as"
      - single_name_part: "map"
  - function_definition
    - function_signature
      - name_paren > paren > single_name_part: "map"
      - name_paren > name_part
        - name_list > single_name_part: "as"
        - name_list > single_name_part: "map"
        - name_list > single_name_part: "↲"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "showline"
      - expression > unary_expression > simple_expression > variable: "map"
      - single_name_part: "as"
      - single_name_part: "map"
  - sigiled_comment: "========================================"
  - eol_comment: "Can be used to create reduce functions."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "with"
      - name_paren > paren > single_name_part: "initial"
      - name_paren > name_part > name_list > single_name_part: "apply"
      - name_paren > paren > single_name_part: "block"
      - name_paren > name_part
        - name_list > single_name_part: "on"
        - name_list > single_name_part: "each"
      - name_paren > ref_paren > ref_name > single_name_part: "item"
      - name_paren > name_part > name_list > single_name_part: "in"
      - name_paren > paren > single_name_part: "list"
    - colon: ":"
    - function_statements
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "do"
        - expression > unary_expression > simple_expression > variable: "initial"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "for"
        - single_name_part: "each"
        - expression > unary_expression > simple_expression > variable: "#item"
        - single_name_part: "in"
        - expression > unary_expression > simple_expression > variable: "list"
        - newindent_block > statement > expression > unary_expression > simple_expression > function_call
          - single_name_part: "do"
          - expression > unary_expression > simple_expression > variable: "block"
  - sigiled_comment: "- WARNING: To prevent \"item\" leaking into the top level "
  - eol_comment: "we have to give it an initial value."
  - eol_comment: "Sum all the elements in the list (or range)."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "sum"
      - name_paren > paren > single_name_part: "list"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "with"
      - newindent_block
        - statement > assignment_statement
          - variable: "sum"
          - colon: ":"
          - expression > unary_expression > simple_expression > literal > number: "0"
        - statement > assignment_statement
          - variable: "item"
          - colon: ":"
          - expression > unary_expression > simple_expression > literal > number: "0"
      - single_name_part: "apply"
      - block > statement > assignment_statement
        - variable: "sum"
        - colon: ":"
        - expression > binary_expression
          - unary_expression > simple_expression > variable: "sum"
          - operator: "+"
          - expression > unary_expression > simple_expression > variable: "item"
      - single_name_part: "on"
      - single_name_part: "each"
      - expression > unary_expression > simple_expression > variable: "item"
      - single_name_part: "in"
      - expression > unary_expression > simple_expression > variable: "list"
  - eol_comment: "Multiply all the elements in the list (or range)."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "product"
      - name_paren > paren > single_name_part: "list"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "with"
      - newindent_block
        - statement > assignment_statement
          - variable: "product"
          - colon: ":"
          - expression > unary_expression > simple_expression > literal > number: "1"
        - statement > assignment_statement
          - variable: "item"
          - colon: ":"
          - expression > unary_expression > simple_expression > literal > number: "0"
      - single_name_part: "apply"
      - block > statement > assignment_statement
        - variable: "product"
        - colon: ":"
        - expression > binary_expression
          - unary_expression > simple_expression > variable: "product"
          - operator: "×"
          - expression > unary_expression > simple_expression > variable: "item"
      - single_name_part: "on"
      - single_name_part: "each"
      - expression > unary_expression > simple_expression > variable: "item"
      - single_name_part: "in"
      - expression > unary_expression > simple_expression > variable: "list"
  - eol_comment: "Concatenate values in a list into a string."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "concatenate"
      - name_paren > paren > single_name_part: "list"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "with"
      - newindent_block
        - statement > assignment_statement
          - variable: "str"
          - colon: ":"
          - expression > unary_expression > simple_expression > literal > string: "\"\""
        - statement > assignment_statement
          - variable: "item"
          - colon: ":"
          - expression > unary_expression > simple_expression > literal > string: "\"\""
      - single_name_part: "apply"
      - block > statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "append"
        - expression > unary_expression > simple_expression > variable: "item"
        - single_name_part: "to"
        - expression > unary_expression > simple_expression > variable: "str"
      - single_name_part: "on"
      - single_name_part: "each"
      - expression > unary_expression > simple_expression > variable: "item"
      - single_name_part: "in"
      - expression > unary_expression > simple_expression > variable: "list"
  - eol_comment: "Create a copy of the \"list\"."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "copy"
      - name_paren > paren > single_name_part: "list"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "based"
      - single_name_part: "on"
      - expression > unary_expression > simple_expression > variable: "list"
  - eol_comment: "Join the contents of \"list1\" and \"list2\"."
  - eol_comment: "The original lists remain unchanged."
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "join"
      - name_paren > paren > single_name_part: "list1"
      - name_paren > name_part > name_list > single_name_part: "and"
      - name_paren > paren > single_name_part: "list2"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > function_call
      - single_name_part: "with"
      - newindent_block
        - statement > assignment_statement
          - variable: "list"
          - colon: ":"
          - expression > unary_expression > simple_expression > function_call
            - single_name_part: "copy"
            - expression > unary_expression > simple_expression > variable: "list1"
        - statement > assignment_statement
          - variable: "item"
          - colon: ":"
          - expression > unary_expression > simple_expression > literal > list: "{}"
      - single_name_part: "apply"
      - block > statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "append"
        - expression > unary_expression > simple_expression > variable: "item"
        - single_name_part: "to"
        - expression > unary_expression > simple_expression > variable: "list"
      - single_name_part: "on"
      - single_name_part: "each"
      - expression > unary_expression > simple_expression > variable: "item"
      - single_name_part: "in"
      - expression > unary_expression > simple_expression > variable: "list2"
  - sigiled_comment: "========================================"
  - function_definition
    - function_signature
      - name_paren > paren > single_name_part: "n"
      - name_paren > name_part
        - name_list > single_name_part: "is"
        - name_list > single_name_part: "divisible"
        - name_list > single_name_part: "by"
      - name_paren > paren > single_name_part: "divisor"
    - colon: ":"
    - function_statements > statement > expression > binary_expression
      - unary_expression > simple_expression > literal > number: "0"
      - operator: "="
      - expression > binary_expression
        - unary_expression > simple_expression > variable: "n"
        - operator: "%"
        - expression > unary_expression > simple_expression > variable: "divisor"
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "inc"
      - name_paren > ref_paren > ref_name > single_name_part: "var"
    - colon: ":"
    - function_statements > statement > assignment_statement
      - variable: "#var"
      - colon: ":"
      - expression > binary_expression
        - unary_expression > simple_expression > variable: "#var"
        - operator: "+"
        - expression > unary_expression > simple_expression > literal > number: "1"
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "dec"
      - name_paren > ref_paren > ref_name > single_name_part: "var"
    - colon: ":"
    - function_statements > statement > assignment_statement
      - variable: "#var"
      - colon: ":"
      - expression > binary_expression
        - unary_expression > simple_expression > variable: "#var"
        - operator: "-"
        - expression > unary_expression > simple_expression > literal > number: "1"
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "first"
        - name_list > single_name_part: "in"
        - optional_name > single_name_part: "the"
      - name_paren > paren > single_name_part: "list"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > list_element
      - single_name_part: "list"
      - expression > unary_expression > simple_expression > literal > number: "1"
  - function_definition
    - function_signature
      - name_paren > name_part
        - name_list > single_name_part: "last"
        - name_list > single_name_part: "in"
        - optional_name > single_name_part: "the"
      - name_paren > paren > single_name_part: "list"
    - colon: ":"
    - function_statements > statement > expression > unary_expression > simple_expression > list_element
      - single_name_part: "list"
      - expression > unary_expression > simple_expression > function_call
        - single_name_part: "length"
        - single_name_part: "of"
        - expression > unary_expression > simple_expression > variable: "list"
  - function_definition
    - function_signature
      - name_paren > name_part > name_list > single_name_part: "square"
      - name_paren > paren > single_name_part: "x"
    - colon: ":"
    - function_statements > statement > expression > binary_expression
      - unary_expression > simple_expression > variable: "x"
      - operator: "×"
      - expression > unary_expression > simple_expression > variable: "x"
  - eol_comment: "Return true 50% of the time."
  - function_definition
    - function_signature > name_paren > name_part > name_list > single_name_part: "heads"
    - colon: ":"
    - function_statements > statement > expression > binary_expression
      - unary_expression > simple_expression > function_call
        - single_name_part: "random"
        - literal > number: "2"
      - operator: "="
      - expression > unary_expression > simple_expression > literal > number: "1"
  - eol_comment: "Swap the values of \"a\" and \"b\"."
  - function_definition
    - function_signature
      - name_paren > ref_paren > ref_name > single_name_part: "a"
      - name_paren > name_part > name_list
        - single_name_part: "swap"
        - single_name_part: "⇆"
      - name_paren > ref_paren > ref_name > single_name_part: "b"
    - colon: ":"
    - function_statements
      - statement > assignment_statement
        - variable: "temp"
        - colon: ":"
        - expression > unary_expression > simple_expression > variable: "#b"
      - statement > assignment_statement
        - variable: "#b"
        - colon: ":"
        - expression > unary_expression > simple_expression > variable: "#a"
      - statement > assignment_statement
        - variable: "#a"
        - colon: ":"
        - expression > unary_expression > simple_expression > variable: "temp"
  - EOI: ""
