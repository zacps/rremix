---
source: src/parser/mod.rs
assertion_line: 72
expression: "format_pair(&pair.unwrap(), 0, true)"
---
- program
  - statement > assignment_statement
    - variable: "block-list"
    - colon: ":"
    - expression > unary_expression > simple_expression > literal > list
      - new_indent: "\t"
      - list_item > block > statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "showline"
        - literal > string: "\"first element\""
      - continue_indent: "\t"
      - list_item > block > statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "showline"
        - literal > string: "\"second element\""
      - continue_indent: "\t"
      - list_item > block > statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "calling"
        - single_name_part: "a"
        - single_name_part: "function"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "showline"
    - literal > list
      - list_item > expression > unary_expression > simple_expression > literal > string: "\"length: \""
      - list_item > expression > unary_expression > simple_expression > function_call
        - single_name_part: "length"
        - single_name_part: "of"
        - expression > unary_expression > simple_expression > variable: "block-list"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "showline"
    - literal > list
      - list_item > expression > unary_expression > simple_expression > literal > string: "\"type of block-list: \""
      - list_item > expression > unary_expression > simple_expression > function_call
        - single_name_part: "type"
        - single_name_part: "of"
        - expression > unary_expression > simple_expression > variable: "block-list"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "showline"
    - literal > list
      - list_item > expression > unary_expression > simple_expression > literal > string: "\"type of first element: \""
      - list_item > expression > unary_expression > simple_expression > function_call
        - single_name_part: "type"
        - single_name_part: "of"
        - expression > unary_expression > simple_expression > list_element
          - single_name_part: "block-list"
          - expression > unary_expression > simple_expression > literal > number: "1"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "do"
    - expression > unary_expression > simple_expression > list_element
      - single_name_part: "block-list"
      - expression > unary_expression > simple_expression > literal > number: "1"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "showline"
    - literal > string: "\"and now ...\""
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "do"
    - expression > unary_expression > simple_expression > list_element
      - single_name_part: "block-list"
      - expression > unary_expression > simple_expression > literal > number: "2"
  - function_definition
    - function_signature > name_paren > name_part
      - name_list > single_name_part: "calling"
      - name_list > single_name_part: "a"
      - name_list > single_name_part: "function"
    - colon: ":"
    - function_statements
      - continue_indent: ""
      - new_indent: "\t"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "showline"
        - literal > string: "\"This is from the called function.\""
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "for"
    - single_name_part: "each"
    - expression > unary_expression > simple_expression > variable: "func"
    - single_name_part: "in"
    - expression > unary_expression > simple_expression > variable: "block-list"
    - newindent_block
      - continue_indent: ""
      - new_indent: "\t"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "do"
        - expression > unary_expression > simple_expression > variable: "func"
  - EOI: ""
