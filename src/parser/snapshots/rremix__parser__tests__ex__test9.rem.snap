---
source: src/parser/mod.rs
assertion_line: 72
expression: "format_pair(&pair.unwrap(), 0, true)"
---
- program
  - eol_comment: ".Fizz-Bang."
  - sigiled_comment: "==========="
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "for"
    - single_name_part: "each"
    - expression > unary_expression > simple_expression > variable: "n"
    - single_name_part: "from"
    - literal > number: "1"
    - single_name_part: "to"
    - literal > number: "100"
    - newindent_block
      - new_indent: "\t"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "if"
        - expression > unary_expression > simple_expression > function_call
          - expression > unary_expression > simple_expression > variable: "n"
          - single_name_part: "is"
          - single_name_part: "divisible"
          - single_name_part: "by"
          - literal > number: "35"
        - newindent_block
          - new_indent: "\t"
          - statement > expression > unary_expression > simple_expression > function_call
            - literal > string: "\"fizz-bang\""
            - single_name_part: "^"
        - single_name_part: "otherwise"
        - newindent_block
          - new_indent: "\t"
          - statement > expression > unary_expression > simple_expression > function_call
            - single_name_part: "if"
            - expression > unary_expression > simple_expression > function_call
              - expression > unary_expression > simple_expression > variable: "n"
              - single_name_part: "is"
              - single_name_part: "divisible"
              - single_name_part: "by"
              - literal > number: "5"
            - newindent_block
              - new_indent: "\t"
              - statement > expression > unary_expression > simple_expression > function_call
                - literal > string: "\"fizz\""
                - single_name_part: "^"
            - single_name_part: "otherwise"
            - newindent_block
              - new_indent: "\t"
              - statement > expression > unary_expression > simple_expression > function_call
                - single_name_part: "if"
                - expression > unary_expression > simple_expression > function_call
                  - expression > unary_expression > simple_expression > variable: "n"
                  - single_name_part: "is"
                  - single_name_part: "divisible"
                  - single_name_part: "by"
                  - literal > number: "7"
                - newindent_block
                  - new_indent: "\t"
                  - statement > expression > unary_expression > simple_expression > function_call
                    - literal > string: "\"bang\""
                    - single_name_part: "^"
                - single_name_part: "otherwise"
                - newindent_block
                  - new_indent: "\t"
                  - statement > expression > unary_expression > simple_expression > function_call
                    - expression > unary_expression > simple_expression > variable: "n"
                    - single_name_part: "^"
      - statement > expression > unary_expression > simple_expression > function_call
        - literal > string: "\" \""
        - single_name_part: "^"
  - statement > expression > unary_expression > simple_expression > variable: "↲"
  - eol_comment: "Trying to do same thing with less indentation."
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "for"
    - single_name_part: "each"
    - expression > unary_expression > simple_expression > variable: "n"
    - single_name_part: "from"
    - literal > number: "1"
    - single_name_part: "to"
    - literal > number: "100"
    - newindent_block
      - new_indent: "\t"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "choose"
        - single_name_part: "from"
        - newindent_block
          - new_indent: "\t"
          - statement > expression > unary_expression > simple_expression > function_call
            - expression > unary_expression > simple_expression > function_call
              - expression > unary_expression > simple_expression > variable: "n"
              - single_name_part: "is"
              - single_name_part: "divisible"
              - single_name_part: "by"
              - literal > number: "35"
            - single_name_part: "do"
            - block > statement > expression > unary_expression > simple_expression > function_call
              - literal > string: "\"fizz-bang\""
              - single_name_part: "^"
          - statement > expression > unary_expression > simple_expression > function_call
            - expression > unary_expression > simple_expression > function_call
              - expression > unary_expression > simple_expression > variable: "n"
              - single_name_part: "is"
              - single_name_part: "divisible"
              - single_name_part: "by"
              - literal > number: "5"
            - single_name_part: "do"
            - block > statement > expression > unary_expression > simple_expression > function_call
              - literal > string: "\"fizz\""
              - single_name_part: "^"
          - statement > expression > unary_expression > simple_expression > function_call
            - expression > unary_expression > simple_expression > function_call
              - expression > unary_expression > simple_expression > variable: "n"
              - single_name_part: "is"
              - single_name_part: "divisible"
              - single_name_part: "by"
              - literal > number: "7"
            - single_name_part: "do"
            - block > statement > expression > unary_expression > simple_expression > function_call
              - literal > string: "\"bang\""
              - single_name_part: "^"
          - statement > expression > unary_expression > simple_expression > function_call
            - expression > unary_expression > simple_expression > variable: "n"
            - single_name_part: "^"
      - statement > expression > unary_expression > simple_expression > function_call
        - literal > string: "\" \""
        - single_name_part: "^"
  - statement > expression > unary_expression > simple_expression > variable: "↲"
  - EOI: ""
