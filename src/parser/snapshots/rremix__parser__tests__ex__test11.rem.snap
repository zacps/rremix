---
source: src/parser/mod.rs
assertion_line: 75
expression: "format_pair(pair.unwrap(), 0, true)"
---
- program
  - statement > assignment_statement
    - single_name_part: "list"
    - colon: ":"
    - expression > unary_expression > simple_expression > literal > literal_list > list
      - list_item > expression > binary_expression
        - unary_expression > simple_expression > literal > number: "5"
        - operator: "+"
        - expression > unary_expression > simple_expression > literal > number: "1"
      - list_item > expression > unary_expression > simple_expression > literal > literal_list > list
        - list_item > expression > unary_expression > simple_expression > literal > number: "3"
        - list_item > expression > unary_expression > simple_expression > literal > literal_list > list
          - list_item > expression > unary_expression > simple_expression > literal > number: "8"
          - list_item > expression > unary_expression > simple_expression > literal > number: "5"
        - list_item > expression > unary_expression > simple_expression > literal > number: "2"
        - list_item > expression > unary_expression > simple_expression > literal > number: "1"
      - list_item > expression > unary_expression > simple_expression > literal > number: "7"
      - list_item > expression > unary_expression > simple_expression > literal > number: "99"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "showline"
    - literal > literal_list > list
      - list_item > expression > unary_expression > simple_expression > literal > string: "\"length of \""
      - list_item > expression > unary_expression > simple_expression > single_name_part: "list"
      - list_item > expression > unary_expression > simple_expression > literal > string: "\" = \""
      - list_item > expression > unary_expression > simple_expression > function_call
        - single_name_part: "length"
        - single_name_part: "of"
        - expression > unary_expression > simple_expression > single_name_part: "list"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "start"
    - expression > unary_expression > simple_expression > single_name_part: "list"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "while"
    - continue_indent: ""
    - inline_block
      - new_indent: "\t"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "not"
        - single_name_part: "at"
        - single_name_part: "end"
        - single_name_part: "of"
        - expression > unary_expression > simple_expression > single_name_part: "list"
    - single_name_part: "repeat"
    - continue_indent: ""
    - inline_block
      - new_indent: "\t"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "show"
        - literal > literal_list > list
          - list_item > expression > unary_expression > simple_expression > function_call
            - single_name_part: "end"
            - single_name_part: "of"
            - expression > unary_expression > simple_expression > single_name_part: "list"
          - list_item > expression > unary_expression > simple_expression > literal > string: "\": \""
      - continue_indent: "\t"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "showline"
        - expression > unary_expression > simple_expression > function_call
          - single_name_part: "next"
          - expression > unary_expression > simple_expression > single_name_part: "list"
  - statement > assignment_statement
    - single_name_part: "powers"
    - colon: ":"
    - expression > unary_expression > simple_expression > literal > literal_list > list
      - list_item > expression > unary_expression > simple_expression > literal > number: "1"
      - list_item > expression > unary_expression > simple_expression > literal > number: "2"
      - list_item > expression > unary_expression > simple_expression > literal > number: "4"
      - list_item > expression > unary_expression > simple_expression > literal > number: "8"
      - list_item > expression > unary_expression > simple_expression > literal > number: "16"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "for"
    - single_name_part: "each"
    - expression > unary_expression > simple_expression > single_name_part: "item"
    - single_name_part: "in"
    - expression > unary_expression > simple_expression > single_name_part: "powers"
    - continue_indent: ""
    - newindent_block
      - new_indent: "\t"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "showline"
        - literal > literal_list > list
          - list_item > expression > unary_expression > simple_expression > literal > string: "\"item: \""
          - list_item > expression > unary_expression > simple_expression > single_name_part: "item"
  - statement > expression > unary_expression > simple_expression > function_call
    - single_name_part: "for"
    - single_name_part: "each"
    - expression > unary_expression > simple_expression > single_name_part: "item"
    - single_name_part: "in"
    - literal > literal_list > list
      - list_item > expression > unary_expression > simple_expression > literal > number: "1"
      - list_item > expression > unary_expression > simple_expression > literal > number: "2"
      - list_item > expression > unary_expression > simple_expression > literal > string: "\"kapow!\""
      - list_item > expression > unary_expression > simple_expression > literal > number: "8"
      - list_item > expression > unary_expression > simple_expression > literal > number: "16"
    - continue_indent: ""
    - newindent_block
      - new_indent: "\t"
      - statement > expression > unary_expression > simple_expression > function_call
        - single_name_part: "showline"
        - literal > literal_list > list
          - list_item > expression > unary_expression > simple_expression > literal > string: "\"item: \""
          - list_item > expression > unary_expression > simple_expression > single_name_part: "item"
  - EOI: ""
